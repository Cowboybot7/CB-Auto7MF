import asyncio
import os
from datetime import datetime, timedelta
import pytz
from CB_AutoMorning import scheduler, trigger_auto_scan, application, logger, TIMEZONE

async def test_auto_scan():
    # Setup test environment
    logger.info("üöÄ Starting auto scan test...")
    
    # Clear existing jobs
    scheduler.remove_all_jobs()
    
    # Schedule test to run at 11:00 AM ICT
    now = datetime.now(TIMEZONE)
    test_time = now.replace(hour=11, minute=0, second=0, microsecond=0)
    
    # If it's already past 11:00, schedule for next day
    if now >= test_time:
        test_time += timedelta(days=1)
    
    # Schedule the test
    scheduler.add_job(
        trigger_auto_scan,
        'date',
        run_date=test_time,
        args=[application]
    )
    
    # Calculate time until test
    wait_seconds = (test_time - now).total_seconds()
    logger.info(f"‚è± Test scheduled for {test_time.strftime('%Y-%m-%d %H:%M:%S')} ICT")
    logger.info(f"‚è≥ Waiting {wait_seconds:.0f} seconds for test to run...")
    
    # Wait until test time
    await asyncio.sleep(wait_seconds)
    
    # Verify the test ran
    logger.info("‚úÖ Test should have run. Check logs for results.")
    
    # Keep application running to see results
    await asyncio.Event().wait()

if __name__ == "__main__":
    # Initialize application
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # Start scheduler
    if not scheduler.running:
        scheduler.start()
    
    try:
        # Run the test
        loop.run_until_complete(test_auto_scan())
    except KeyboardInterrupt:
        logger.info("Test interrupted")
    finally:
        scheduler.shutdown()
        loop.close()
